"use strict";(self.webpackChunkkubedoop=self.webpackChunkkubedoop||[]).push([[314],{2795:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>t,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"core-concepts/common-configuration-mechanisms/roles-and-role-groups","title":"Roles and Role Groups","description":"In a software program, a program consists of multiple different processes, each with its own responsibilities.","source":"@site/docs/core-concepts/common-configuration-mechanisms/roles-and-role-groups.md","sourceDirName":"core-concepts/common-configuration-mechanisms","slug":"/core-concepts/common-configuration-mechanisms/roles-and-role-groups","permalink":"/docs/core-concepts/common-configuration-mechanisms/roles-and-role-groups","draft":false,"unlisted":false,"editUrl":"https://github.com/zncdatadev/docs/docs/core-concepts/common-configuration-mechanisms/roles-and-role-groups.md","tags":[],"version":"current","lastUpdatedBy":"whg517","lastUpdatedAt":1732264107000,"frontMatter":{"title":"Roles and Role Groups"},"sidebar":"docs","previous":{"title":"Advanced: Configuration Overrides","permalink":"/docs/core-concepts/common-configuration-mechanisms/overrides"},"next":{"title":"Database","permalink":"/docs/core-concepts/resources/database"}}');var r=o(4848),a=o(8453);const t={title:"Roles and Role Groups"},i=void 0,l={},c=[{value:"Example",id:"example",level:2}];function d(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"In a software program, a program consists of multiple different processes, each with its own responsibilities.\nEach independent process is defined as a role, and there can be multiple instances of a role. Multiple instances of a role are called a role group.\nA role group is a logical concept that represents multiple instances of a role. The purpose of a role group is to provide high availability and fault tolerance."}),"\n",(0,r.jsx)(n.p,{children:"A role can define multiple role groups based on different situations. For example, a role can have two role groups, one in Data Center A and another in Data Center B.\nThis way, even if Data Center A fails, the role group in Data Center B can continue to work. Or, based on different resource requirements,\na role can have multiple role groups, one using SSD and another using HDD."}),"\n",(0,r.jsx)(n.p,{children:"Roles and role groups can meet the following needs:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Configuration: Define role groups with different configurations for roles based on business needs, such as memory, CPU, disk, or program configuration."}),"\n",(0,r.jsx)(n.li,{children:"Scheduling: Define role groups with different scheduling for roles based on business needs, such as data center, network, or resource scheduling."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.p,{children:"Take HDFS as an example. HDFS has multiple roles, such as NameNode, DataNode, and JournalNode. Among them, DataNode is a role,\nand multiple instances of DataNode form a role group. NameNode is also a role, and multiple instances of NameNode form a role group.\nDifferent configurations of role groups can be defined for NameNode and DataNode based on business needs."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'apiVersion: hdfs.kubedoop.dev/v1alpha1\nkind: HdfsCluster\nmetadata:\n  labels:\n    app.kubernetes.io/name: hdfscluster\n    app.kubernetes.io/instance: hdfscluster-sample\n    app.kubernetes.io/part-of: hdfs-operator\n    app.kubernetes.io/managed-by: kustomize\n    app.kubernetes.io/created-by: hdfs-operator\n  name: hdfscluster-sample\nspec:\n  image:\n    repository: qury.io/zncdatadev/hadoop\n    tag: 3.3.4\n  clusterConfig:\n    zookeeperDiscoveryZNode: sample-hdfs\n  nameNode:\n    roleGroups:\n      default:\n        replicas: 2\n  dataNode:\n    roleGroups:\n      default:\n        replicas: 3\n        config:\n          resources:\n            cpu:\n              min: 1\n              max: 2\n            memory:\n              limit: "3Gi"\n  journalNode:\n    roleGroups:\n      default:\n        replicas: 3\n'})}),"\n",(0,r.jsx)(n.p,{children:"In the above example, we have defined:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"An HDFS cluster that includes three roles: NameNode, DataNode, and JournalNode."}),"\n",(0,r.jsx)(n.li,{children:"NameNode has a role group with two instances."}),"\n",(0,r.jsx)(n.li,{children:"DataNode has a role group with three instances, each with a minimum CPU of 1, a maximum CPU of 2, and a memory limit of 3Gi."}),"\n",(0,r.jsx)(n.li,{children:"JournalNode has a role group with three instances."}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>t,x:()=>i});var s=o(6540);const r={},a=s.createContext(r);function t(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);